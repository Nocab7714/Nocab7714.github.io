<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JavaScript 核心觀念 - 屬性特徵是什麼？</title>
    <url>/2024/04/28/JavaScript-%E6%A0%B8%E5%BF%83%E8%A7%80%E5%BF%B5-%E5%B1%AC%E6%80%A7%E7%89%B9%E5%BE%B5%E6%98%AF%E4%BB%80%E9%BA%BC%EF%BC%9F/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇章節會介紹何謂物件中的屬性特徵，透過認識屬性特徵，可以讓我們更加細部的對物件進行設定與控制。</p>
<hr>
<h2 id="什麼是屬性特徵呢？"><a href="#什麼是屬性特徵呢？" class="headerlink" title="什麼是屬性特徵呢？"></a>什麼是屬性特徵呢？</h2><p>在我們平時定義物件之後，如果打開 chrome 的 console 可以看到內容如下圖，我們只能知道物件中的值（value）：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/3Usl9n0.png" alt="console 結果"></p>
<p>可是這種方法並不能夠完全的看到物件中的屬性特徵，我們只能夠透過<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor" title="Object.getOwnPropertyDescriptor() - JavaScript | MDN">「Object.getOwnPropertyDescriptor」</a>這段語法來顯示出物件的屬性特徵：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(person,<span class="string">&#x27;a&#x27;</span>));</span><br><span class="line"><span class="comment">// Object.getOwnPropertyDescriptor(物件名稱,&#x27;屬性名稱&#x27;)</span></span><br></pre></td></tr></table></figure>

<p>在程式碼運行後的結果就可以看到以下內容：<br><img src="https://i.imgur.com/RsGs9ie.png" alt="Object.getOwnPropertyDescriptor 的 console 結果"></p>
<p>從內容中我們就可以看到這四個值就是物件中的其中一個屬性的所有屬性特徵：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那麼這四個屬性值分別是：</p>
<ul>
<li>value：屬性值。</li>
<li>writable : 可否被修改屬性值。</li>
<li>configurable：可否被刪除。</li>
<li>enumerable：可否被列舉。（例如是否可以被迴圈讀取出來）</li>
</ul>
<p>那麼這四個屬性特徵究竟要如何操作呢？接下來我們透過另一段的語法「Object.defineProperty」來介紹這四個屬性特徵吧！</p>
<hr>
<h2 id="Object-defineProperty-如何使用？"><a href="#Object-defineProperty-如何使用？" class="headerlink" title="Object.defineProperty 如何使用？"></a>Object.defineProperty 如何使用？</h2><p>關於 Object.defineProperty，我們可以先參考 <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" title="Object.defineProperty() - JavaScript | MDN">MDN 文件</a>中的介紹認識到他的使用方式，並且透過文件中了解到 Object.defineProperty 這段語法的使用方式如下：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person,<span class="string">&#x27;a&#x27;</span>,&#123;</span><br><span class="line">  value　: <span class="number">1</span> ,</span><br><span class="line">  writable　: <span class="literal">true</span> ,</span><br><span class="line">  configurable　: <span class="literal">true</span> ,</span><br><span class="line">  enumerable : <span class="literal">true</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 Object.defineProperty 的括弧中帶入的參數分別為，第一個是物件名稱；第二個屬性名稱（記得要用單引號包住）；第三個屬性特徵的設定（記得用大括號包住），並且這些屬性特徵中除了 value 的值以外，其他三項的預設值都是 true。</p>
<p>在大致了解屬性特徵是什麼以後，接下來我們就要來嘗試透過這段語法對屬性特徵進行調整。想必 value 這個屬性特徵就如字面上的意思，是調整物件屬性的值，所以這部分的操作並不有太多的介紹，我們直接對「writable」這個屬性特徵進行調整。</p>
<h3 id="調整-writable"><a href="#調整-writable" class="headerlink" title="調整 writable"></a>調整 writable</h3><p>我們延續上一個的物件範例：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;修改前: &#x27;</span>, person);</span><br></pre></td></tr></table></figure>

<p>接著我們使用 Object.defineProperty 來修改物件中的值。設定 person 物件中 a 屬性的值為 5 ，並且設定無法修改屬性值：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改屬性值，並設定值無法被複寫</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person,<span class="string">&#x27;a&#x27;</span>,&#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;修改後: &#x27;</span>, person);</span><br><span class="line"></span><br><span class="line">person.<span class="property">a</span> = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;嘗試複寫: &#x27;</span>, person);</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/iSGR3PY.png" alt=" 使用 Object.defineProperty 修改 writable 屬性特徵的結果"></p>
<blockquote>
<p>透過 Object.defineProperty 修改屬性中的值可以看到，第一次的設定 a 屬性的 value 值為 5 有成功修改，不過因為同時將 writable 設定為 false，後續透過點記法 person.a 嘗試複寫修改 a 屬性的值為 10 的時候，結果並未成功的被修改。</p>
</blockquote>
<div class="note warning"><p>這邊要注意一下，因為是「靜默錯誤」的關係，這邊嘗試修改後執行程式碼並不會跳出錯誤訊息，所以在除錯上可能會造成困難。如果希望能夠跳出錯誤的訊息，這時候可以使用嚴謹模式「use strict」。</p>
</div>

<p>使用 use strict 的模式觀察：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">  person.<span class="property">a</span> = <span class="number">5</span>;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/7JYFE2Y.png" alt="use strict 的模式觀察的結果"></p>
<blockquote>
<p>由於 writable 設定為 false，在嘗試修改物件的屬性值時會跳出錯誤訊息 ncaught TypeError: Cannot assign to read only property ‘a’ of object ‘#Object’ ，代表該物件設定為無法修改複寫屬性值。</p>
</blockquote>
<p>在嚴謹模式下的 console 結果就可以看到系統跳出的錯誤訊息「Uncaught TypeError: Cannot assign to read only property ‘a’ of object ‘#Object’」，這樣就可以提醒其他使用者在操作這段程式碼的時候，能夠知道物件的屬性特徵是設定為無法被複寫修改的。</p>
<h3 id="調整-configurable"><a href="#調整-configurable" class="headerlink" title="調整 configurable"></a>調整 configurable</h3><p>那麼在上方示範的是調整 value 與 writable 的設定，接下來我們換嘗試設定「configurable」的屬性特徵：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&#x27;b&#x27;</span>, &#123;</span><br><span class="line">  configurable : <span class="literal">false</span> <span class="comment">// configurable 設定為 false ,代表無法被刪除</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> person.<span class="property">a</span>;</span><br><span class="line"><span class="keyword">delete</span> person.<span class="property">b</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);</span><br></pre></td></tr></table></figure>

<p>在屬性特徵的部分若沒有要調整，可以不用手動設定，就依照原本的預設值，所以下方的範例程式碼中，我們只要修改 person 物件中的 b 屬性 ，將 configurable 的值設定為 false。在設定 configurable 為 false 後，表示接下來 person 的 b 屬性是無法被刪除的，我們可以嘗試使用 delete 的運算子刪除屬性 a 與 b，在結果可以看到，a 屬性被成功刪除，不過 b 屬性是依照 configurable 為 false 的設定而無法被刪除。</p>
<p><img src="https://i.imgur.com/QHqRigw.png" alt="使用 Object.defineProperty 修改 configurable 屬性特徵的結果"></p>
<blockquote>
<p>在嘗試刪除物件中的 a、b 屬性，由於 b 屬性特徵設定為無法刪除，所以 b 屬性在使用 delete 的操作符後，該屬性值依然保留了下來。</p>
</blockquote>
<h3 id="調整-enumerable"><a href="#調整-enumerable" class="headerlink" title="調整 enumerable"></a>調整 enumerable</h3><p>最後一個我們來調整看看屬性特徵「enumerable」為 false 會發生什麼事情：</p>
<p>enumerable 為列舉，我們設定 person 物件的 c 屬性特徵 enumerable 為 false，代表 c 屬性接下來無法被列舉。你說什麼是列舉呢？我們可以透過 for 迴圈來觀察，將 person 物件帶入 for 迴圈中，正常情況下是物件中每個屬性都會被列舉出來，不過由於使用 Object.defineProperty 設定物件中的 c 屬性為無法被列舉的，也就是 enumerable 為 false，所以在最後呈現的 console 結果並不會顯示 c 屬性值，只有 a 和 b 。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person,<span class="string">&#x27;c&#x27;</span>,&#123;</span><br><span class="line">  enumerable : <span class="literal">false</span> <span class="comment">// enumerable 設定為 false ,代表無法被列舉</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">var</span> key <span class="keyword">in</span> person)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;列舉: &#x27;</span> + key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/FkWqUdK.png" alt="使用 Object.defineProperty 修改 enumerable 屬性特徵的結果"></p>
<p>以上就是關於使用 Object.defineProperty 這段語法來操作屬性特徵的示範。</p>
<h2 id="關於屬性的淺層保護"><a href="#關於屬性的淺層保護" class="headerlink" title="關於屬性的淺層保護"></a>關於屬性的淺層保護</h2><p>在 Object.defineProperty 針對屬性特徵 value 的設定僅有做到淺層保護，如下方的範例：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person,<span class="string">&#x27;d&#x27;</span>,&#123;</span><br><span class="line">  <span class="attr">value</span>:&#123;&#125;,</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">person.<span class="property">d</span> = <span class="number">6</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;直接賦予值&#x27;</span>, person);</span><br></pre></td></tr></table></figure>

<p>一開始我們先在 person 物件中使用 Object.defineProperty 設定一個新的屬性 d，該屬性的 value 為一個空物件，並且設定 writable 為 false 使資料無法被複寫。在這之後我們使用點記號的方式賦予值給 d 屬性，可以看到在後面 console 的結果會因為 writable 設定為 false，所以 person.d &#x3D; 6; 這段程式碼並沒有成功將值給複寫。</p>
<p><img src="https://i.imgur.com/wtZpGPH.png" alt="淺層保護範例"></p>
<blockquote>
<p>d 屬性由於 writable 設定為 false，所以依舊保持原有的空物件的值。</p>
</blockquote>
<p>不過如果我們將賦予值的方式改為這樣：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">person.<span class="property">d</span>.<span class="property">a</span> = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/kpljjtW.png" alt="淺層保護範例"></p>
<blockquote>
<p>在結果上就可以看到 d 屬性當中原本的空物件被覆寫了，改為 a 屬性 10 的值。這是因為 Object.defineProperty 針對 value 的設定僅有做到淺層保護。</p>
</blockquote>
<hr>
<h2 id="一次只能設定一個屬性的屬性特徵嗎？"><a href="#一次只能設定一個屬性的屬性特徵嗎？" class="headerlink" title="一次只能設定一個屬性的屬性特徵嗎？"></a>一次只能設定一個屬性的屬性特徵嗎？</h2><p>使用「Object.defineProperties」就可以大量的修改物件中的屬性特徵。使用的方式可以參造 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties" title="Object.defineProperties() - JavaScript | MDN">MDN 文件</a>提供的方式。</p>
<p>使用的方式和 Object.defineProperty 差不多，第一個參數是物件名稱，接著後面放入要修改的屬性，屬性要使用大括弧包裹住，並且物件名稱、屬性特徵皆不用加上 ‘’ 符號，最後用相同的方式設定要修改的屬性特徵：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(person,&#123;</span><br><span class="line">  <span class="attr">a</span>:&#123;</span><br><span class="line">    <span class="attr">value</span>:<span class="number">4</span>,</span><br><span class="line">    <span class="attr">writable</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">b</span>:&#123;</span><br><span class="line">    <span class="attr">value</span>:<span class="number">5</span>,</span><br><span class="line">    <span class="attr">writable</span>:<span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">c</span>:&#123;</span><br><span class="line">    <span class="attr">value</span>:<span class="number">6</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">d</span>:&#123;</span><br><span class="line">    <span class="attr">value</span>:<span class="number">7</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/BdORVR5.png" alt="Object.defineProperties 範例結果"></p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>物件屬性不可寫入？物件擴充的修改與調整</title>
    <url>/2024/05/24/%E7%89%A9%E4%BB%B6%E5%B1%AC%E6%80%A7%E4%B8%8D%E5%8F%AF%E5%AF%AB%E5%85%A5%EF%BC%9F%E7%89%A9%E4%BB%B6%E6%93%B4%E5%85%85%E7%9A%84%E4%BF%AE%E6%94%B9%E8%88%87%E8%AA%BF%E6%95%B4/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在先前有介紹到如果要調整屬性的特徵我們可以使用 Object.defineProperty 與 Object.defineProperties 這兩個物件的方法。那麼接下來我們要來介紹如何讓物件可以防止物件擴張、封裝物件與凍結物件的方法，這些方法分別為：</p>
<ul>
<li><strong>Object.preventExtensions()</strong> 防止物件擴張</li>
<li><strong>Object.seal()</strong> 封裝物件</li>
<li><strong>Object.freeze()</strong> 凍結物件</li>
</ul>
<hr>
<h2 id="Object-preventExtensions"><a href="#Object-preventExtensions" class="headerlink" title="Object.preventExtensions()"></a>Object.preventExtensions()</h2><p>Object.preventExtensions() 的作用為防止擴充，透過下方的程式碼範例可以了解，對物件使用 preventExtensions 的時候，依舊可以調整屬性值，也可以修改屬性特徵，能夠刪除屬性，不過無法新增新的屬性。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// preventExtensions</span></span><br><span class="line"><span class="comment">// 防止擴充</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">preventExtensions</span>(person);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;是否可被擴充&#x27;</span>, <span class="title class_">Object</span>.<span class="title function_">isExtensible</span>(person));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person a 的屬性特徵&#x27;</span>, <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(person, <span class="string">&#x27;a&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 調整屬性</span></span><br><span class="line">person.<span class="property">a</span> = <span class="string">&#x27;a&#x27;</span>; <span class="comment">// 可調整屬性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增屬性</span></span><br><span class="line">person.<span class="property">d</span> = <span class="string">&#x27;d&#x27;</span>; <span class="comment">// 無法新增屬性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 巢狀屬性調整</span></span><br><span class="line">person.<span class="property">c</span>.<span class="property">a</span> = <span class="string">&#x27;ca&#x27;</span>; <span class="comment">// 可以調整巢狀屬性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 調整特徵</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&#x27;a&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 可以修改屬性特徵</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 刪除</span></span><br><span class="line"><span class="keyword">delete</span> person.<span class="property">b</span>; <span class="comment">// 可以刪除屬性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 結果</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person 物件&#x27;</span>, person);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person a 屬性特徵(嘗試修改後)&#x27;</span>, <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(person, <span class="string">&#x27;a&#x27;</span>));</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/WXVZNHc.png" alt="console 結果"></p>
<hr>
<h2 id="Object-seal"><a href="#Object-seal" class="headerlink" title="Object.seal()"></a>Object.seal()</h2><p>使用 Object.seal() 可以讓物件屬性無法新增刪除（巢狀屬性可以被調整），也無法重新配置特徵，但是可以調整目前屬性值。（該物件會被加上 preventExtensions）</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// seal</span></span><br><span class="line"><span class="comment">// 物件屬性無法新增刪除，也無法重新配置特徵，但是可以調整目前屬性值</span></span><br><span class="line"><span class="comment">// 不過 writable 的屬性特徵可以調整為 false</span></span><br><span class="line"><span class="comment">// 物件會被加上 preventExtensions</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">seal</span>(person);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;是否可被 封裝&#x27;</span>, <span class="title class_">Object</span>.<span class="title function_">isSealed</span>(person));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person a 的屬性特徵&#x27;</span>, <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(person, <span class="string">&#x27;a&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 調整屬性</span></span><br><span class="line">person.<span class="property">a</span> = <span class="string">&#x27;a&#x27;</span>; <span class="comment">// 可以調整屬性值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增屬性</span></span><br><span class="line">person.<span class="property">d</span> = <span class="string">&#x27;d&#x27;</span>; <span class="comment">// 無法新增屬性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 巢狀屬性調整</span></span><br><span class="line">person.<span class="property">c</span>.<span class="property">a</span> = <span class="string">&#x27;ca&#x27;</span>; <span class="comment">// 可以調整巢狀屬性值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 調整特徵</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&#x27;a&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">false</span> <span class="comment">// 若修改的屬性特徵為 writable，則可修改</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 刪除</span></span><br><span class="line"><span class="keyword">delete</span> person.<span class="property">b</span>; <span class="comment">// 無法刪除屬性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 結果</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person 物件&#x27;</span>, person);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person a 屬性特徵(嘗試修改後)&#x27;</span>, <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(person, <span class="string">&#x27;a&#x27;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/hQLUmvI.png" alt="console 結果"></p>
<p>雖然說 Object.seal() 無法重新配置屬性特徵，不過在 MDN 的文件中有提到 writable 的屬性特徵可以調整為 false。</p>
<p><img src="https://i.imgur.com/y6u6FEM.png" alt="MDN 的文件中有提到 writable 的屬性特徵可以調整為 false"></p>
<p>所以如果我們在使用 Object.seal() 的情況下嘗試修改物件中其他的屬性特徵，就會出現以下的錯誤訊息。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 調整特徵</span></span><br><span class="line"> <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&#x27;a&#x27;</span>, &#123;</span><br><span class="line">   <span class="attr">enumerable</span>: <span class="literal">false</span> <span class="comment">// 無法修改該屬性特徵</span></span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/OgKkZK6.png" alt="在使用 Object.seal() 的情況下嘗試修改物件中其他的屬性特徵，出現的錯誤訊息。"></p>
<hr>
<h2 id="Object-freeze"><a href="#Object-freeze" class="headerlink" title="Object.freeze()"></a>Object.freeze()</h2><p>再針對物件使用 Object.freeze() 的時候，無法新增、修改予刪除屬性值（巢狀屬性可以修改），無法修物件的屬性特徵。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// freeze</span></span><br><span class="line"><span class="comment">// 物件會加上 seal，並且無法調整值</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>(person);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;是否被凍結&#x27;</span>, <span class="title class_">Object</span>.<span class="title function_">isFrozen</span>(person));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person a 的屬性特徵&#x27;</span>, <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(person, <span class="string">&#x27;a&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 調整屬性</span></span><br><span class="line">person.<span class="property">a</span> = <span class="string">&#x27;a&#x27;</span>; <span class="comment">// 無法調整屬性值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增屬性</span></span><br><span class="line">person.<span class="property">d</span> = <span class="string">&#x27;d&#x27;</span>; <span class="comment">// 無法新增屬性值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 巢狀屬性調整</span></span><br><span class="line">person.<span class="property">c</span>.<span class="property">a</span> = <span class="string">&#x27;ca&#x27;</span>; <span class="comment">// 由於物件有一個傳參考特性，所以只能夠針對當下的物件作封裝，故巢狀屬性值是可以被調整的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 刪除</span></span><br><span class="line"><span class="keyword">delete</span> person.<span class="property">b</span>; <span class="comment">// 無法刪除屬性值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 結果</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person 物件&#x27;</span>, person);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person a 屬性特徵(嘗試修改後)&#x27;</span>, <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(person, <span class="string">&#x27;a&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/maUyXPt.png" alt="console 結果"></p>
<p>在物件設定 Object.freeze() 的情況下調整屬性特徵，會跳出錯誤訊息並終止程式碼運行：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 調整特徵</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&#x27;a&#x27;</span>, &#123;</span><br><span class="line">   <span class="attr">configurable</span>: <span class="literal">true</span> <span class="comment">// 無法調整屬性特徵</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/tlt8uEK.png" alt="物件設定 Object.freeze() 的情況下調整屬性特徵，會跳出錯誤訊息並終止程式碼運行"></p>
<hr>
<h2 id="章節結論"><a href="#章節結論" class="headerlink" title="章節結論"></a>章節結論</h2><ul>
<li>使用 Object.preventExtensions() 可以防止物件擴張，無法新增物件屬性。</li>
<li>使用 Object.seal() 會封裝物件，使物件無法新增與刪除物件屬性（巢狀屬性可調整屬性值），不過可以調整屬性值；無法調整屬性特徵，除了 writable 可設定為 false 不再此限制。</li>
<li>使用 Object.freeze() 會凍結物件，使物件無法新增、刪除、調整屬性值（巢狀屬性可調整屬性值），也無法調整屬性特徵。</li>
</ul>
<hr>
<h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ul>
<li><p><a href="https://www.hexschool.com/courses/js-core.html">JavaScript 核心篇 - 邁向達人之路 | 六角學院</a></p>
</li>
<li><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions">MDNObject.preventExtensions() - JavaScript | MDN</a></p>
</li>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/seal">MDNObject.seal() - JavaScript | MDN</a></p>
</li>
<li><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze">MDNObject.freeze() - JavaScript | MDN</a></p>
</li>
</ul>
]]></content>
  </entry>
</search>
